import {
   Container,
   Title,
   Text,
   Divider,
   Box,
   ScrollArea,
   Table,
   Group,
   ThemeIcon,
   Center,
   Loader,
   Button,
} from "@mantine/core";
import {
   useCreatePaymentMutation,
   useGetPricingPlansQuery,
} from "@/features/pricing/model/api";
import { IconCheck, IconStar, IconZzz } from "@tabler/icons-react";
import { useSelector } from "react-redux";
import { RootState } from "@/app/store/store";
import { useNavigate } from "react-router-dom";

export const PricingPage = () => {
   const navigate = useNavigate();
   const { userID, isAuthenticated } = useSelector(
      (state: RootState) => state.auth
   );

   const { data: plans } = useGetPricingPlansQuery();
   const [createPayment] = useCreatePaymentMutation();

   const handleSelect = async (plan: any) => {
      if (!isAuthenticated) {
         navigate("/auth/signin");
         return;
      }
      const payload = {
         id: userID, // id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         amount: plan.price * 100, // —Ü–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
         subscription_type: plan.name, // –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
         subscription_time: new Date(
            new Date().setDate(new Date().getDate() + 30)
         )
            .toISOString()
            .split("T")[0],
      };
      try {
         const response = await createPayment(payload).unwrap();

         if (response?.message?.Success && response?.message?.PaymentURL) {
            window.location.href = response.message.PaymentURL;
         } else {
            console.log("Payment success");
            // –î–æ–±–∞–≤—å—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
         }
      } catch (error) {
         console.error("Error creating payment:", error);
         // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
      }
   };

   if (!plans) {
      return (
         <Center style={{ height: "100vh" }}>
            <Loader size="lg" color="blue" variant="dots" />
         </Center>
      );
   }

   // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   const featureRows = [
      {
         feature: "üí¨ –ó–∞–ø—Ä–æ—Å—ã –≤ –º–µ—Å—è—Ü",
         values: ["300", "1 000", "2 500", "7 000"],
      },
      {
         feature: "üì© –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö*",
         values: ["1 200", "20 000", "100 000", "400 000"],
      },
      {
         feature: "üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü",
         values: ["‚ùå", "200", "500", "1 400"],
      },
      {
         feature: "üîä –û–∑–≤—É—á–µ–∫ –≤ –º–µ—Å—è—Ü",
         values: ["‚ùå", "200", "500", "1 400"],
      },
      {
         feature: "üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ",
         values: ["‚ùå", "‚úÖ", "‚úÖ", "‚úÖ"],
      },
      {
         feature: "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã",
         values: ["‚ùå", "‚úÖ", "‚úÖ", "‚úÖ"],
      },
      {
         feature:
            "ü§ñ –î–æ—Å—Ç—É–ø –∫ ChatGPT 4o, o3 mini üÜï, Claude Sonnet, Gemini Pro, Perplexity",
         values: ["‚ùå", "‚úÖ", "‚úÖ", "‚úÖ"],
      },
      {
         feature:
            "ü§ñ –î–æ—Å—Ç—É–ø –∫ Claude Opus, Perplexity Pro, ChatGPT o3 mini-high üÜï",
         values: ["‚ùå", "‚ùå", "‚úÖ", "‚úÖ"],
      },
      {
         feature: "ü§ñ –î–æ—Å—Ç—É–ø –∫ o1",
         values: ["‚ùå", "‚ùå", "‚ùå", "‚úÖ"],
      },
      // {
      //    feature: "–¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü",
      //    // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      //    values: ["", "300 ‚ÇΩ", "750 ‚ÇΩ", "2 000 ‚ÇΩ"],
      // },
   ];

   return (
      <Container size="lg" py={80}>
         {/* Hero Section */}
         <Box mb={40} sx={{ textAlign: "center" }}>
            <Title
               order={1}
               size={48}
               weight={700}
               align="center"
               mb="md"
               sx={(theme) => ({
                  background: `-webkit-linear-gradient(${theme.colors.blue[6]}, ${theme.colors.cyan[5]})`,
                  WebkitBackgroundClip: "text",
                  WebkitTextFillColor: "transparent",
               })}
            >
               –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
            </Title>
            <Text size="xl" color="dimmed" maw={800} mx="auto" align="center">
               –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º. –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã —Å–æ–∑–¥–∞–Ω—ã
               –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ.
            </Text>
         </Box>
         {/* Pricing Table */}

         <ScrollArea>
            <Table highlightOnHover verticalSpacing="md">
               <thead>
                  <tr>
                     <th
                        style={{
                           minWidth: 200,
                           padding: "8px",
                           backgroundColor: "#000",
                           color: "#fff",
                           fontWeight: 400,
                        }}
                     >
                        –í–û–ó–ú–û–ñ–ù–û–°–¢–¨
                     </th>
                     {plans.map((plan, index) => {
                        // –î–ª—è 2-–≥–æ –∏ 3-–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–¥–∞—ë–º –∂–∏—Ä–Ω–æ–µ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ
                        const fontWeight =
                           index === 0
                              ? 400
                              : index === 1 || index === 2
                              ? 700
                              : 400;
                        return (
                           <th
                              key={plan.id}
                              style={{
                                 minWidth: 140,
                                 padding: "8px",
                                 backgroundColor: "#000",
                                 color: "#fff",
                                 fontWeight: fontWeight,
                                 textAlign: "center",
                              }}
                           >
                              <Title order={4} style={{ margin: 0 }}>
                                 {plan.title}
                              </Title>
                              <Text
                                 size="xl"
                                 weight={700}
                                 style={{ margin: 0 }}
                              >
                                 {plan.price}‚ÇΩ/–º–µ—Å—è—Ü
                              </Text>
                           </th>
                        );
                     })}
                  </tr>
               </thead>
               <tbody>
                  {featureRows.map((row, rowIndex) => (
                     <tr key={rowIndex}>
                        <td
                           style={{
                              padding: "8px",
                              textAlign: "center",
                              border: "1px solid #ccc",
                           }}
                        >
                           {row.feature}
                        </td>
                        {row.values.map((value, colIndex) => {
                           let bgColor = "";
                           if (colIndex === 1)
                              bgColor = "rgba(255, 245, 177, 0.25)";
                           else if (colIndex === 2)
                              bgColor = "rgba(137, 230, 255, 0.25)";
                           else if (colIndex === 3)
                              bgColor = "rgba(252, 8, 0, 0.25)";
                           return (
                              <td
                                 key={colIndex}
                                 style={{
                                    minWidth: 140,
                                    padding: "8px",
                                    textAlign: "center",
                                    backgroundColor: bgColor,
                                    border: "1px solid #ccc",
                                 }}
                              >
                                 {value}
                              </td>
                           );
                        })}
                     </tr>
                  ))}
                  <tr>
                     <td
                        style={{
                           padding: "8px",
                           textAlign: "center",
                           border: "1px solid #ccc",
                        }}
                     ></td>
                     {plans.map((plan, index) =>
                        index === 0 ? (
                           <td
                              key={plan.id}
                              style={{
                                 minWidth: 140,
                                 padding: "8px",
                                 textAlign: "center",
                                 border: "1px solid #ccc",
                              }}
                           ></td>
                        ) : (
                           <td
                              key={plan.id}
                              style={{
                                 minWidth: 140,
                                 padding: "8px",
                                 textAlign: "center",
                                 border: "1px solid #ccc",
                              }}
                           >
                              <Button
                                 variant="outline"
                                 fullWidth
                                 onClick={() => handleSelect(plan)}
                              >
                                 –í—ã–±—Ä–∞—Ç—å
                              </Button>
                           </td>
                        )
                     )}
                  </tr>
               </tbody>
            </Table>
         </ScrollArea>
         <Divider my={40} />
         {/* Features Section */}
         <Box mt={40}>
            <Title order={2} size={36} align="center" mb="xl">
               –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å
            </Title>
            <Group
               position="center"
               justify="space-between"
               spacing="xl"
               noWrap
            >
               <Box sx={{ textAlign: "center" }}>
                  <ThemeIcon variant="light" size={60} radius="lg" color="blue">
                     <IconZzz size={30} />
                  </ThemeIcon>
                  <Title order={4} mt={16}>
                     –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
                  </Title>
                  <Text c="dimmed" maw={250}>
                     –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
                  </Text>
               </Box>
               <Box sx={{ textAlign: "center" }}>
                  <ThemeIcon variant="light" size={60} radius="lg" color="cyan">
                     <IconStar size={30} />
                  </ThemeIcon>
                  <Title order={4} mt={16}>
                     –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞
                  </Title>
                  <Text c="dimmed" maw={250}>
                     –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
                  </Text>
               </Box>
               <Box sx={{ textAlign: "center" }}>
                  <ThemeIcon
                     variant="light"
                     size={60}
                     radius="lg"
                     color="violet"
                  >
                     <IconCheck size={30} />
                  </ThemeIcon>
                  <Title order={4} mt={16}>
                     –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                  </Title>
                  <Text c="dimmed" maw={250}>
                     –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
                  </Text>
               </Box>
            </Group>
         </Box>
         <Divider my={40} />
         {/* FAQ Section */}
         <Box mt={40}>
            <Title order={2} size={36} align="center" mb="xl">
               –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            </Title>
            <Group
               position="center"
               justify="space-between"
               spacing="xl"
               noWrap
            >
               <Box sx={{ minWidth: 300 }}>
                  <Title order={4} mb={8}>
                     –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ?
                  </Title>
                  <Text c="dimmed" maw={500}>
                     –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –†–∞–∑–Ω–∏—Ü–∞ –≤
                     —Ü–µ–Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
                  </Text>
               </Box>
               <Box sx={{ minWidth: 300 }}>
                  <Title order={4} mb={8}>
                     –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
                  </Title>
                  <Text c="dimmed" maw={500}>
                     –î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º 14-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—Å–µ—Ö
                     –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                  </Text>
               </Box>
            </Group>
         </Box>
      </Container>
   );
};
